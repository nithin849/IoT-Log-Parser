# -*- coding: utf-8 -*-
"""iot_log_parser.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e1wS9if84REGorpYzxn8j5X_i0K-pmPL
"""

import re
import base64
import pandas as pd
import json
from io import BytesIO
from PIL import Image
import matplotlib.pyplot as plt
from google.colab import files

print("Please upload your log file:")
uploaded = files.upload()
log_file_name = list(uploaded.keys())[0]

parsed_data = []
errors = []

def decode_base64_image(base64_string, save_path=None):
    try:
        image_data = base64.b64decode(base64_string)
        image = Image.open(BytesIO(image_data))
        if save_path:
            image.save(save_path)
        return image
    except Exception as e:
        errors.append(f"Error decoding Base64 image: {e}")
        return None

with open(log_file_name, 'r') as file:
    log_contents = file.readlines()

for line in log_contents:
    line = line.strip()
    try:
        if line.startswith("BASE64:"):
            base64_data = line.split("BASE64:")[1]
            decoded_image = decode_base64_image(base64_data)
            if decoded_image:
                parsed_data.append({"type": "image", "content": "Base64 Image Decoded"})
        elif line.startswith("{") and line.endswith("}"):
            json_data = json.loads(line)
            parsed_data.append({"type": "json", "content": json_data})


        else:
            kv_pairs = re.findall(r'(\w+)=([\w\.\-:]+)', line)
            if kv_pairs:
                parsed_data.append({"type": "key_value", "content": dict(kv_pairs)})
            else:
                errors.append(f"Unrecognized format: {line}")

    except Exception as e:
        errors.append(f"Error parsing line: {line} - {e}")

structured_data = pd.DataFrame([entry['content'] for entry in parsed_data if entry['type'] == "key_value"])

with open("error_log.txt", "w") as error_file:
    for error in errors:
        error_file.write(error + "\n")

if "action" in structured_data.columns:
    action_counts = structured_data["action"].value_counts()
    plt.figure(figsize=(8, 5))
    action_counts.plot(kind='bar', color='skyblue')
    plt.title("Action Counts")
    plt.xlabel("Actions")
    plt.ylabel("Counts")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

structured_data.to_csv("structured_data.csv", index=False)
print("Parsing complete! Download your error log and structured data:")
files.download("error_log.txt")
files.download("structured_data.csv")